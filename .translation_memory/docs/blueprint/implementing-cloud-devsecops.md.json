{
  "source_file_path_relative_to_docusaurus_root": "docs/blueprint/implementing-cloud-devsecops.md",
  "source_file_content_hash": "4fe93c270991e2e053bd500bb1af050592c9f5085110c87a8638c79fdde8331a",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: implementing-cloud-devsecops-pipelines\ntitle: Building Cloud DevSecOps Pipelines (In Theory)\ndescription: Building DevSecOps Pipelines In Theory\nsidebar_position: 8\n---",
      "source_content_hash": "0d0c84031de3f200a60089068f218ca7464bee39803113c1518737095920535e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Author: [Damien Burks]",
      "source_content_hash": "5ea0b7dea762d9db1deb5a12bbe8e41ef43190e41291691bb9f75859ac1ac1bf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "著者: [Damien Burks]"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Stages of a Cloud DevSecOps Pipeline (Terraform Deployment)",
      "source_content_hash": "219bc094bff529c716d2748de6e015cd85ef7f5e0a4849e3a798339f27f81e28",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## クラウドDevSecOpsパイプラインのステージ（Terraformデプロイメント）"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "In this example, I’m using a **Jenkins pipeline with Terraform** for cloud infrastructure as code (IaC) to provision and manage cloud environments. The Jenkins pipeline includes stages to lint and validate Terraform configurations, scan for security issues, apply infrastructure, and perform post-deployment testing.",
      "source_content_hash": "506c6fa8fa680e396231237f2a249fbc889cf89166beda0ccb0237dfd26d1acd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "この例では、**JenkinsパイプラインとTerraform**を使用して、クラウドインフラストラクチャをコード（IaC）としてプロビジョニングおよび管理しています。Jenkinsパイプラインには、Terraform設定のリントと検証、セキュリティ問題のスキャン、インフラストラクチャの適用、およびデプロイ後のテストを行うステージが含まれています。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "The outline listed below is sudo code, with an small explanation in each stage to follow:",
      "source_content_hash": "f9ce5128a1cb45f55ce88edf7272d112b1681b611f880166cdfa96fccdd9ce87",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "以下に示すアウトラインは疑似コードであり、各ステージごとに簡単な説明が続きます："
      }
    },
    {
      "segment_id": "41ad46a6",
      "source_content": "```groovy\npipeline {\n    agent any\n\n    environment {\n        AWS_CREDENTIALS = credentials('aws-access-key-id')  // Example for AWS IAM credentials\n        TF_VERSION = '1.0.11'                              // Terraform version\n        TERRAFORM_DIR = 'terraform'                        // Terraform directory\n        SNYK_ORG_NAME = \"snyk-org-id\"\n    }\n\n    stages {\n        stage('Checkout Code') {\n            steps {\n                // Checking out code from version control system (GitHub, GitLab, Gitea, etc.)\n                checkout scm\n            }\n        }\n\n        stage('Terraform Init') {\n            steps {\n                // Initializing Terraform in the specified directory\n                sh \"\"\"\n                terraform -version\n                cd ${TERRAFORM_DIR}\n                terraform init\n                \"\"\"\n            }\n        }\n\n        stage('Terraform Lint') {\n            steps {\n                // Running terraform fmt to check for formatting issues\n                sh \"\"\"\n                cd ${TERRAFORM_DIR}\n                terraform fmt -check\n                \"\"\"\n            }\n        }\n\n        stage('Terraform Validate') {\n            steps {\n                // Validating the Terraform configuration\n                sh \"\"\"\n                cd ${TERRAFORM_DIR}\n                terraform validate\n                \"\"\"\n            }\n        }\n\n        stage('Terraform Plan') {\n            steps {\n                // Running terraform plan to check the changes that will be applied\n                sh \"\"\"\n                cd ${TERRAFORM_DIR}\n                terraform plan -out=tfplan\n                \"\"\"\n            }\n        }\n\n        stage('Security Scanning') {\n            parallel {\n                stage('Checkov Scan') {\n                    steps {\n                        // Scanning the Terraform configuration for misconfigurations\n                        sh \"\"\"\n                        cd ${TERRAFORM_DIR}\n                        checkov --directory . --quiet\n                        \"\"\"\n                    }\n                }\n                stage('Snyk Scan') {\n                    steps {\n                        // Running Snyk to check security issues in the Terraform configurations and generate a report\n                        sh \"\"\"\n                        cd ${TERRAFORM_DIR}\n                        snyk iac test --severity-threshold=high --org=${SNYK_ORG_NAME} --report\n                        \"\"\"\n                    }\n                }\n            }\n        }\n\n        stage('Terraform Apply') {\n            when {\n                expression {\n                    return params.APPLY_TERRAFORM == true  // Optional parameter to conditionally apply\n                }\n            }\n            steps {\n                // Applying the Terraform plan to the cloud provider (e.g., AWS, GCP, Azure)\n                sh \"\"\"\n                cd ${TERRAFORM_DIR}\n                terraform apply -auto-approve tfplan\n                \"\"\"\n            }\n        }\n\n        stage('Post-Deployment Testing') {\n            steps {\n                // Run integration tests or security tests after infrastructure deployment if you're like to. This\n                // can look completely different for everyone's use case to ensure your infrastructure is alive.\n                sh \"\"\"\n                cd ${TERRAFORM_DIR}/tests\n                ./run-post-deployment-tests.sh\n                \"\"\"\n            }\n        }\n    }\n\n    post {\n        always {\n            // Example: Archiving Terraform logs and test results\n            archiveArtifacts artifacts: '**/terraform.tfstate', allowEmptyArchive: true\n            junit '**/test-results/*.xml'\n\n            // Clean up workspace after build\n            cleanWs()\n        }\n    }\n}\n```",
      "source_content_hash": "da229309319b356f7ff5d2339fe900864e6f9c0a705edc1a48cb25322ec48eee",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_41ad46a6"
      }
    },
    {
      "segment_id": "c6868a9f",
      "source_content": "## Other Infrastructure as Code (IaC) Languages",
      "source_content_hash": "88d7169cc02f96dbaf9545ce1db9a92f4d6aee5ed6c89aaf43be06778b9c4a26",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## その他のInfrastructure as Code（IaC）言語"
      }
    },
    {
      "segment_id": "bb1346b6",
      "source_content": "If you're looking to explore other languages for deploying you infrastructure into the cloud other than Terraform (although it's the best), then you can look at the table below:",
      "source_content_hash": "41e5b6b43c2a77c554592e8fc615474af1c22693b493564d86941fbfcae9d635",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "Terraform以外の言語（ただしTerraformが最良ですが）を使用してクラウドにインフラストラクチャをデプロイする方法を探している場合は、以下の表を参照してください："
      }
    },
    {
      "segment_id": "9c3b8644",
      "source_content": "| **Tool / Language**                                                                          | **Short Summary**                                                                                               |\n| :------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------- |\n| **[Terraform](https://www.terraform.io/)**                                                   | Multi-cloud provisioning and management using HashiCorp Configuration Language (HCL).                           |\n| **[AWS CloudFormation](https://aws.amazon.com/cloudformation/)**                             | Native AWS IaC tool using YAML/JSON templates for declarative resource provisioning in AWS.                     |\n| **[Azure Resource Manager (ARM)](https://docs.microsoft.com/azure/azure-resource-manager/)** | Azure-native JSON templates for deploying and configuring Azure resources.                                      |\n| **[Bicep](https://docs.microsoft.com/azure/azure-resource-manager/bicep/)**                  | A higher-level DSL for Azure resource deployment that simplifies ARM templates.                                 |\n| **[Google Cloud Deployment Manager](https://cloud.google.com/deployment-manager)**           | Declarative IaC for GCP resources using YAML, Jinja2, or Python templates.                                      |\n| **[Pulumi](https://www.pulumi.com/)**                                                        | Provision infrastructure across multiple clouds using general-purpose languages (TypeScript, Python, Go, etc.). |",
      "source_content_hash": "d8b37b160f76d1fec0e0c816b92e2643a76f1626f09826d2a5a0c42a4d155464",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_9c3b8644"
      }
    },
    {
      "segment_id": "6ab1b234",
      "source_content": "## Security Tools to Integrate into Cloud CI/CD Pipelines",
      "source_content_hash": "a5d74280cbe63c46573c35d0f4bdb331ec22c135aad60c2ca2f36fcdc73f8c95",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## クラウドCI/CDパイプラインに統合するセキュリティツール"
      }
    },
    {
      "segment_id": "42d9ca67",
      "source_content": "If you're trying to figure out what cloud security tools you should use in your pipelines (or just locally), here are the list of resources I have outlined:",
      "source_content_hash": "1da864f24bab14c20c776a5008acddfaabfa8a7c6733b12fd02ef0e1200108dc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "パイプライン（またはローカル環境）で使用すべきクラウドセキュリティツールについて検討している場合、以下にリソースのリストをまとめました："
      }
    },
    {
      "segment_id": "51c5cf39",
      "source_content": "| **Tool Name**                                                             | **Description**                                                                                               | **Category**                                                      |\n| ------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |\n| [SonarQube](https://www.sonarqube.org/)                                   | One of the most popular SAST tools, SonarQube analyzes code quality and security across multiple languages.   | SAST                                                              |\n| [Semgrep](https://semgrep.dev/)                                           | A fast and flexible static analysis tool for identifying security vulnerabilities in source code.             | SAST                                                              |\n| [Bandit](https://bandit.readthedocs.io/en/latest/)                        | Popular Python-focused SAST tool for identifying security issues in Python codebases.                         | SAST                                                              |\n| [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/) | A widely-used tool that checks for known vulnerabilities in project dependencies.                             | SAST                                                              |\n| [Snyk](https://snyk.io/)                                                  | A developer-first tool that scans for vulnerabilities in code, open-source dependencies, containers, and IaC. | SAST, Dependency Scanning, Container Security, and Cloud Security |\n| [OWASP ZAP](https://owasp.org/www-project-zap/)                           | One of the most popular DAST tools, ZAP identifies security vulnerabilities in running web applications.      | DAST                                                              |\n| [Arachni](https://www.arachni-scanner.com/)                               | A modular DAST scanner that is widely used for testing modern web applications.                               | DAST                                                              |\n| [Nikto](https://github.com/sullo/nikto)                                   | A highly popular DAST tool that scans web servers for vulnerabilities and misconfigurations.                  | DAST                                                              |\n| [Trivy](https://github.com/aquasecurity/trivy)                            | A comprehensive vulnerability scanner for containers and cloud-native applications.                           | Container & Cloud Security                                        |\n| [Anchore Engine](https://github.com/anchore/anchore-engine)               | Open-source tool for scanning container images for vulnerabilities and enforcing security policies.           | Container Security                                                |\n| [Clair](https://github.com/quay/clair)                                    | A popular open-source tool for scanning vulnerabilities in Docker and OCI container images.                   | Container Security                                                |",
      "source_content_hash": "3bec5cb7a53ce717002c51d249bb92c70f15369335b30a96eb6bd19438d442cd",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_51c5cf39"
      }
    },
    {
      "segment_id": "58f98d22",
      "source_content": "## Additional Resources",
      "source_content_hash": "10f87178f164c035ecfa7770143db68c2c8a7dfbbddfd5278bdeb0733b121288",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "ja": "## 追加リソース"
      }
    },
    {
      "segment_id": "d636abf8",
      "source_content": "To learn about more tools and such that you should use to help you build out your pipelines, check out this amazing resource created by Marek Šottl: [Ultimate DevSecOps Library](https://github.com/sottlmarek/DevSecOps?tab=readme-ov-file#ultimate-devsecops-library)",
      "source_content_hash": "249197db8269d85f0b899d79e076ae6fc5d916df7e6c05395a671b10df863a1a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "ja": "パイプライン構築を支援するためのより多くのツールについて学ぶには、Marek Šottlが作成したこの素晴らしいリソースをチェックしてください：[Ultimate DevSecOps Library](https://github.com/sottlmarek/DevSecOps?tab=readme-ov-file#ultimate-devsecops-library)"
      }
    },
    {
      "segment_id": "1c89921c",
      "source_content": "<!-- Links -->",
      "source_content_hash": "25f54153c0d0e0dac3bb699044aa9b88a8a71752b65c898e921cc72c327d285a",
      "node_type": "comment",
      "translatable": false,
      "translations": {
        "ja": "@@untranslatable_placeholder_1c89921c"
      }
    },
    {
      "segment_id": "22fab619",
      "source_content": "[Damien Burks]: https://www.youtube.com/@damienjburks",
      "source_content_hash": "7097815c6ac6c02cff2091f30ccf75b895bb53b20eda52fea9f0f673e9d0ed23",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "ja": "[Damien Burks]: https://www.youtube.com/@damienjburks"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/current/blueprint/implementing-cloud-devsecops.md",
  "last_updated_timestamp": "2025-06-06T10:44:33.149096+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "ja": "4fe93c270991e2e053bd500bb1af050592c9f5085110c87a8638c79fdde8331a"
  }
}